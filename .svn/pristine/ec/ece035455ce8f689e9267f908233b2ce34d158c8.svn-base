/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ViewContainerRef, ComponentFactoryResolver, ElementRef, HostListener, forwardRef, ChangeDetectorRef, Input, KeyValueDiffers, Output, EventEmitter, Renderer2 } from '@angular/core';
import { DaterangepickerComponent } from './daterangepicker.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as _moment from 'moment';
import { LocaleService } from './locale.service';
const /** @type {?} */ moment = _moment;
export class DaterangepickerDirective {
    /**
     * @param {?} viewContainerRef
     * @param {?} _changeDetectorRef
     * @param {?} _componentFactoryResolver
     * @param {?} _el
     * @param {?} _renderer
     * @param {?} differs
     * @param {?} _localeService
     */
    constructor(viewContainerRef, _changeDetectorRef, _componentFactoryResolver, _el, _renderer, differs, _localeService) {
        this.viewContainerRef = viewContainerRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._el = _el;
        this._renderer = _renderer;
        this.differs = differs;
        this._localeService = _localeService;
        this._onChange = Function.prototype;
        this._onTouched = Function.prototype;
        this._validatorChange = Function.prototype;
        this.dateLimit = null;
        this.showCancel = false;
        // timepicker variables
        this.timePicker = false;
        this.timePicker24Hour = false;
        this.timePickerIncrement = 1;
        this.timePickerSeconds = false;
        this._locale = {};
        this._endKey = 'endDate';
        this._startKey = 'startDate';
        this.notForChangesProperty = [
            'locale',
            'endKey',
            'startKey'
        ];
        this.onChange = new EventEmitter();
        this.rangeClicked = new EventEmitter();
        this.datesUpdated = new EventEmitter();
        this.drops = 'down';
        this.opens = 'right';
        const /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(DaterangepickerComponent);
        viewContainerRef.clear();
        const /** @type {?} */ componentRef = viewContainerRef.createComponent(componentFactory);
        this.picker = (/** @type {?} */ (componentRef.instance));
        this.picker.inline = false; // set inline to false for all directive usage
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set locale(value) {
        this._locale = Object.assign({}, this._localeService.config, value);
    }
    /**
     * @return {?}
     */
    get locale() {
        return this._locale;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set startKey(value) {
        if (value !== null) {
            this._startKey = value;
        }
        else {
            this._startKey = 'startDate';
        }
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set endKey(value) {
        if (value !== null) {
            this._endKey = value;
        }
        else {
            this._endKey = 'endDate';
        }
    }
    ;
    /**
     * @return {?}
     */
    get value() {
        return this._value || null;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this._onChange(val);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.picker.rangeClicked.asObservable().subscribe((range) => {
            this.rangeClicked.emit(range);
        });
        this.picker.datesUpdated.asObservable().subscribe((range) => {
            this.datesUpdated.emit(range);
        });
        this.picker.choosedDate.asObservable().subscribe((change) => {
            if (change) {
                const /** @type {?} */ value = {};
                value[this._startKey] = change.startDate;
                value[this._endKey] = change.endDate;
                this.value = value;
                this.onChange.emit(value);
                if (typeof change.chosenLabel === 'string') {
                    this._el.nativeElement.value = change.chosenLabel;
                }
            }
        });
        this.picker.firstMonthDayClass = this.firstMonthDayClass;
        this.picker.lastMonthDayClass = this.lastMonthDayClass;
        this.picker.emptyWeekRowClass = this.emptyWeekRowClass;
        this.picker.firstDayOfNextMonthClass = this.firstDayOfNextMonthClass;
        this.picker.lastDayOfPreviousMonthClass = this.lastDayOfPreviousMonthClass;
        this.picker.drops = this.drops;
        this.picker.opens = this.opens;
        this.localeDiffer = this.differs.find(this.locale).create();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        for (let /** @type {?} */ change in changes) {
            if (changes.hasOwnProperty(change)) {
                if (this.notForChangesProperty.indexOf(change) === -1) {
                    this.picker[change] = changes[change].currentValue;
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.localeDiffer) {
            const /** @type {?} */ changes = this.localeDiffer.diff(this.locale);
            if (changes) {
                this.picker.updateLocale(this.locale);
            }
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this._onTouched();
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    open(event) {
        this.picker.show(event);
        setTimeout(() => {
            this.setPosition();
        });
    }
    /**
     * @param {?=} e
     * @return {?}
     */
    hide(e) {
        this.picker.hide(e);
    }
    /**
     * @param {?=} e
     * @return {?}
     */
    toggle(e) {
        if (this.picker.isShown) {
            this.hide(e);
        }
        else {
            this.open(e);
        }
    }
    /**
     * @return {?}
     */
    clear() {
        this.picker.clear();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        this.setValue(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    setValue(val) {
        if (val) {
            if (val[this._startKey]) {
                this.picker.setStartDate(val[this._startKey]);
            }
            if (val[this._endKey]) {
                this.picker.setEndDate(val[this._endKey]);
            }
            this.picker.calculateChosenLabel();
            if (this.picker.chosenLabel) {
                this._el.nativeElement.value = this.picker.chosenLabel;
            }
        }
        else {
            this.picker.clear();
        }
    }
    /**
     * Set position of the calendar
     * @return {?}
     */
    setPosition() {
        let /** @type {?} */ style;
        let /** @type {?} */ containerTop;
        const /** @type {?} */ container = this.picker.pickerContainer.nativeElement;
        const /** @type {?} */ element = this._el.nativeElement;
        if (this.drops && this.drops == 'up') {
            containerTop = (element.offsetTop - container.clientHeight) + 'px';
        }
        else {
            containerTop = 'auto';
        }
        if (this.opens == 'left') {
            style = {
                top: containerTop,
                left: (element.offsetLeft - container.clientWidth + element.clientWidth) + 'px',
                right: 'auto'
            };
        }
        else if (this.opens == 'center') {
            style = {
                top: containerTop,
                left: (element.offsetLeft + element.clientWidth / 2
                    - container.clientWidth / 2) + 'px',
                right: 'auto'
            };
        }
        else {
            style = {
                top: containerTop,
                left: element.offsetLeft + 'px',
                right: 'auto'
            };
        }
        if (style) {
            this._renderer.setStyle(container, 'top', style.top);
            this._renderer.setStyle(container, 'left', style.left);
            this._renderer.setStyle(container, 'right', style.right);
        }
    }
    /**
     * For click outside of the calendar's container
     * @param {?} event event object
     * @param {?} targetElement target element object
     * @return {?}
     */
    outsideClick(event, targetElement) {
        if (!targetElement) {
            return;
        }
        if (targetElement.classList.contains('ngx-daterangepicker-action')) {
            return;
        }
        const /** @type {?} */ clickedInside = this._el.nativeElement.contains(targetElement);
        if (!clickedInside) {
            this.hide();
        }
    }
}
DaterangepickerDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[ngxDaterangepickerMd]',
                host: {
                    '(keyup.esc)': 'hide()',
                    '(blur)': 'onBlur()',
                    '(click)': 'open()'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => DaterangepickerDirective), multi: true
                    }
                ]
            },] }
];
/** @nocollapse */
DaterangepickerDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
    { type: ChangeDetectorRef, },
    { type: ComponentFactoryResolver, },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: KeyValueDiffers, },
    { type: LocaleService, },
];
DaterangepickerDirective.propDecorators = {
    "minDate": [{ type: Input },],
    "maxDate": [{ type: Input },],
    "autoApply": [{ type: Input },],
    "alwaysShowCalendars": [{ type: Input },],
    "showCustomRangeLabel": [{ type: Input },],
    "linkedCalendars": [{ type: Input },],
    "dateLimit": [{ type: Input },],
    "singleDatePicker": [{ type: Input },],
    "showWeekNumbers": [{ type: Input },],
    "showISOWeekNumbers": [{ type: Input },],
    "showDropdowns": [{ type: Input },],
    "isInvalidDate": [{ type: Input },],
    "isCustomDate": [{ type: Input },],
    "showClearButton": [{ type: Input },],
    "ranges": [{ type: Input },],
    "opens": [{ type: Input },],
    "drops": [{ type: Input },],
    "lastMonthDayClass": [{ type: Input },],
    "emptyWeekRowClass": [{ type: Input },],
    "firstDayOfNextMonthClass": [{ type: Input },],
    "lastDayOfPreviousMonthClass": [{ type: Input },],
    "keepCalendarOpeningWithRange": [{ type: Input },],
    "showRangeLabelOnInput": [{ type: Input },],
    "showCancel": [{ type: Input },],
    "timePicker": [{ type: Input },],
    "timePicker24Hour": [{ type: Input },],
    "timePickerIncrement": [{ type: Input },],
    "timePickerSeconds": [{ type: Input },],
    "locale": [{ type: Input },],
    "_endKey": [{ type: Input },],
    "startKey": [{ type: Input },],
    "endKey": [{ type: Input },],
    "onChange": [{ type: Output, args: ['change',] },],
    "rangeClicked": [{ type: Output, args: ['rangeClicked',] },],
    "datesUpdated": [{ type: Output, args: ['datesUpdated',] },],
    "outsideClick": [{ type: HostListener, args: ['document:click', ['$event', '$event.target'],] },],
};
function DaterangepickerDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    DaterangepickerDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    DaterangepickerDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    DaterangepickerDirective.propDecorators;
    /** @type {?} */
    DaterangepickerDirective.prototype.picker;
    /** @type {?} */
    DaterangepickerDirective.prototype._onChange;
    /** @type {?} */
    DaterangepickerDirective.prototype._onTouched;
    /** @type {?} */
    DaterangepickerDirective.prototype._validatorChange;
    /** @type {?} */
    DaterangepickerDirective.prototype._value;
    /** @type {?} */
    DaterangepickerDirective.prototype.localeDiffer;
    /** @type {?} */
    DaterangepickerDirective.prototype.minDate;
    /** @type {?} */
    DaterangepickerDirective.prototype.maxDate;
    /** @type {?} */
    DaterangepickerDirective.prototype.autoApply;
    /** @type {?} */
    DaterangepickerDirective.prototype.alwaysShowCalendars;
    /** @type {?} */
    DaterangepickerDirective.prototype.showCustomRangeLabel;
    /** @type {?} */
    DaterangepickerDirective.prototype.linkedCalendars;
    /** @type {?} */
    DaterangepickerDirective.prototype.dateLimit;
    /** @type {?} */
    DaterangepickerDirective.prototype.singleDatePicker;
    /** @type {?} */
    DaterangepickerDirective.prototype.showWeekNumbers;
    /** @type {?} */
    DaterangepickerDirective.prototype.showISOWeekNumbers;
    /** @type {?} */
    DaterangepickerDirective.prototype.showDropdowns;
    /** @type {?} */
    DaterangepickerDirective.prototype.isInvalidDate;
    /** @type {?} */
    DaterangepickerDirective.prototype.isCustomDate;
    /** @type {?} */
    DaterangepickerDirective.prototype.showClearButton;
    /** @type {?} */
    DaterangepickerDirective.prototype.ranges;
    /** @type {?} */
    DaterangepickerDirective.prototype.opens;
    /** @type {?} */
    DaterangepickerDirective.prototype.drops;
    /** @type {?} */
    DaterangepickerDirective.prototype.firstMonthDayClass;
    /** @type {?} */
    DaterangepickerDirective.prototype.lastMonthDayClass;
    /** @type {?} */
    DaterangepickerDirective.prototype.emptyWeekRowClass;
    /** @type {?} */
    DaterangepickerDirective.prototype.firstDayOfNextMonthClass;
    /** @type {?} */
    DaterangepickerDirective.prototype.lastDayOfPreviousMonthClass;
    /** @type {?} */
    DaterangepickerDirective.prototype.keepCalendarOpeningWithRange;
    /** @type {?} */
    DaterangepickerDirective.prototype.showRangeLabelOnInput;
    /** @type {?} */
    DaterangepickerDirective.prototype.showCancel;
    /** @type {?} */
    DaterangepickerDirective.prototype.timePicker;
    /** @type {?} */
    DaterangepickerDirective.prototype.timePicker24Hour;
    /** @type {?} */
    DaterangepickerDirective.prototype.timePickerIncrement;
    /** @type {?} */
    DaterangepickerDirective.prototype.timePickerSeconds;
    /** @type {?} */
    DaterangepickerDirective.prototype._locale;
    /** @type {?} */
    DaterangepickerDirective.prototype._endKey;
    /** @type {?} */
    DaterangepickerDirective.prototype._startKey;
    /** @type {?} */
    DaterangepickerDirective.prototype.notForChangesProperty;
    /** @type {?} */
    DaterangepickerDirective.prototype.onChange;
    /** @type {?} */
    DaterangepickerDirective.prototype.rangeClicked;
    /** @type {?} */
    DaterangepickerDirective.prototype.datesUpdated;
    /** @type {?} */
    DaterangepickerDirective.prototype.viewContainerRef;
    /** @type {?} */
    DaterangepickerDirective.prototype._changeDetectorRef;
    /** @type {?} */
    DaterangepickerDirective.prototype._componentFactoryResolver;
    /** @type {?} */
    DaterangepickerDirective.prototype._el;
    /** @type {?} */
    DaterangepickerDirective.prototype._renderer;
    /** @type {?} */
    DaterangepickerDirective.prototype.differs;
    /** @type {?} */
    DaterangepickerDirective.prototype._localeService;
}

//# sourceMappingURL=data:application/json;base64,