import { Subscription, Observable } from 'rxjs';
import { BookingEvent } from './../../../../Shared/dataModal/bookingSlot.modal';
import { Router } from '@angular/router';
import { Component, OnInit, OnDestroy, ViewEncapsulation } from '@angular/core';
import { ActionSheetController } from '@ionic/angular';
import { ToastController } from '@ionic/angular';
import { DataService } from '../../../../services/data.service';
import { Storage } from '@ionic/storage';

@Component({
  selector: 'app-available',
  templateUrl: './available.page.html',
  styleUrls: ['./available.page.scss'],
  encapsulation: ViewEncapsulation.None,
})
export class AvailablePage implements OnInit {

  currentSlotInfo: BookingEvent[];
  allSlotInfo: BookingEvent[];
  currentDay: string;
  currentDate: number;
  dateModel: string = "March";
  step = null;
  fetchSlotAccordingToSelectedDate = [];
  noDataAvailableMsg: string = null;
  selectedDateFromCalendar: string;
  yesterdayDate: Date = new Date((new Date().setDate(new Date().getDate() - 1)));
  isPastDate: boolean = false;
  availableSubscription: Subscription;
  role: string;
  isInterviewer: boolean = false;
  isRecruiter: boolean = false;
  multipleDelete: boolean = false;
  hideDelete: boolean = true;
  deleteAll: boolean = false;
  deleteSelectedArray = [];
  selectAllCheckbox: boolean = false;

  selectedDateObjectFromCalendar: {
    date: number,
    month: number,
    year: number
  }
  constructor(private data: DataService,
    private router: Router,
    private actionSheetController: ActionSheetController,
    private toastController: ToastController,
    private storage: Storage) {
    this.role = localStorage.getItem("role");
    // storage.get('role').then((val) => {
    console.log('Your role is : ', this.role);
    if (this.role === "Interviewer") {
      this.isInterviewer = true;
      this.isRecruiter = false;
    } else if (this.role === "Recruiter") {
      this.isRecruiter = true;
      this.isInterviewer = false;
    }
    // });
  }

  ngOnInit() {
    this.availableSubscription = this.data.slotSubject.subscribe((res: BookingEvent[]) => {
      console.log(res);
      this.currentSlotInfo = res.filter(slots => {
        return slots.color["name"] === 'grey'
      });
      if (this.currentSlotInfo.length !== 0) {
        this.commonSetDayandDate(this.currentSlotInfo);
        this.selectedDateFromCalendar = this.commonDateFormatter(this.currentSlotInfo[0].start);
        this.selectedDateObjectFromCalendar = null;
      } else {
        this.data.selectedDateSubject.subscribe((date: Date) => {
          this.selectedDateFromCalendar = this.commonDateFormatter(date);
          this.selectedDateObjectFromCalendar = null;
          this.noDataAvailableMsg = "No slots available";
        });

      }
    });

    this.allSlotInfo = this.data.events;
  }

  ngOnDestroy() {
    console.log("ngOnDestroy destroyed or not");
    // this.data.slotSubject.complete();
    this.availableSubscription.unsubscribe();
  }


  setStep(index: number) {
    console.log(index);
    this.step = index;
  }


  dateClass = (d: Date) => {
    let classValue = "";
    let counter = 0;
    if (this.allSlotInfo.length !== 0) {
      this.allSlotInfo.forEach(slot => {
        if (slot.start.getDate() === d["_i"].date && slot.start.getMonth() === d["_i"].month && slot.start.getFullYear() === d["_i"].year) {
          counter++;
        }
      });
      if (counter >= 1) {
        classValue = 'example-custom-date-class';
      } else {
        classValue = "";
      }
    }
    return classValue
  }

  dateChanged(event) {
    this.step = null;
    console.log(event);
    this.fetchSlotAccordingToSelectedDate = [];
    if (this.allSlotInfo.length !== 0) {
      this.allSlotInfo.forEach(allSlot => {
        if (this.commonDateFormatter(allSlot.start) === this.commonDateFormatter(event.value._d)) {
          console.log(allSlot);
          this.fetchSlotAccordingToSelectedDate.push(allSlot);
        }
      });
      console.log(this.fetchSlotAccordingToSelectedDate);
    }
    if (this.fetchSlotAccordingToSelectedDate.length !== 0) {
      this.currentSlotInfo = this.fetchSlotAccordingToSelectedDate;
      this.commonSetDayandDate(this.currentSlotInfo);
      this.noDataAvailableMsg = null;
    } else {
      this.currentDay = null;
      this.currentDate = null;
      this.currentSlotInfo = [];
      this.noDataAvailableMsg = "No slots available";
    }


    this.selectedDateFromCalendar = this.commonDateFormatter(event.value._d);
    this.selectedDateObjectFromCalendar = event.value._i;
    console.log(this.selectedDateFromCalendar);
    console.log(this.selectedDateObjectFromCalendar);
  }

  gotoBookingForm(slotInfo?) {
    console.log("slotInfo", slotInfo);
    let value = this.selectedDateFromCalendar.split("-");
    let monthNumber: number;
    this.data.months.forEach((month, index) => {
      if (month === value[1]) {
        monthNumber = index;
      }
    });
    let year = Number(value[2]);
    let date = Number(value[0]);
    let selectedDate = new Date(year, monthNumber, date);
    console.log(selectedDate);
    this.router.navigate(["/booking-form"]);
    this.data.setBookingDataForBookingForm({
      dateInString: this.selectedDateFromCalendar,
      dateInObject: this.selectedDateObjectFromCalendar,
      date: selectedDate,
      slotInfo: slotInfo,
      from: "available"
    });
  }

  commonSetDayandDate(data) {
    if (data.length !== 0) {
      this.currentDay = this.fetchWeekDaybyNumber(data[0].start.getDay());
      this.currentDate = data[0].start.getDate();
    }
  }

  commonDateFormatter(dateInput: Date) {
    let date;
    let month;
    let year;
    let totalString;
    this.isPastDate = dateInput.getTime() > this.yesterdayDate.getTime();


    date = dateInput.getDate();
    month = dateInput.getMonth();
    year = dateInput.getFullYear();
    totalString = `${date}-${this.fetchMonthbyNumber(month)}-${year}`;
    return totalString;
  }

  fetchWeekDaybyNumber(number) {
    let day = "";
    switch (number) {
      case 0:
        day = "Sun";
        break;
      case 1:
        day = "Mon";
        break;
      case 2:
        day = "Tue";
        break;
      case 3:
        day = "Wed";
        break;
      case 4:
        day = "Thur";
        break;
      case 5:
        day = "Fri";
        break;
      case 6:
        day = "Sat";
        break;
    }
    return day;
  }


  fetchMonthbyNumber(number) {
    let month = "";
    switch (number) {
      case 0:
        month = "Jan";
        break;
      case 1:
        month = "Feb";
        break;
      case 2:
        month = "Mar";
        break;
      case 3:
        month = "Apr";
        break;
      case 4:
        month = "May";
        break;
      case 5:
        month = "Jun";
        break;
      case 6:
        month = "Jul";
        break;
      case 7:
        month = "Aug";
        break;
      case 8:
        month = "Sep";
        break;
      case 9:
        month = "Oct";
        break;
      case 10:
        month = "Nov";
        break;
      case 11:
        month = "Dec";
        break;
    }
    return month;
  }

  getTimeFromDatein12HoursFormat(date: Date) {
    let timeInAmPmFormat: string = "";
    let time = date.getHours();
    let minutesNum = date.getMinutes();
    let minutes = minutesNum < 10 ? (0 + minutesNum.toString()) : minutesNum === 0 ? "00" : minutesNum;
    if (time > 12) {
      timeInAmPmFormat = (time - 12).toString() + ":" + minutes + " " + "PM"
    } else if (time === 12) {
      timeInAmPmFormat = "12" + ":" + minutes + " " + "PM"
    } else {
      timeInAmPmFormat = (time).toString() + ":" + minutes + " " + "AM"
    }
    return timeInAmPmFormat;
  }

  goToFeedback() {
    console.log("inside feedback");
    this.router.navigate(["/feedback"]);
  }
  reschedule(slot) {
    console.log(slot);
    this.gotoBookingForm(slot);
  }
  delete(slot) {
    console.log(slot);
    this.presentActionSheet(slot);
  }

  async presentActionSheet(slot) {
    const actionSheet = await this.actionSheetController.create({
      header: 'Do you want to delete this slot ?',
      buttons: [{
        text: 'Delete',
        role: 'destructive',
        icon: 'trash',
        handler: () => {
          if (this.isInterviewer) {
            this.data.deleteInterviewSlot(slot.calendarId).subscribe(res => {
              console.log(res);
              if (res["message"]) {
                this.data.getAllInterviewerSlots();
                let index = this.currentSlotInfo.indexOf(slot);
                this.currentSlotInfo.splice(index, 1);
                if (this.currentSlotInfo.length === 0) {
                  this.noDataAvailableMsg = "No slots available";
                }
                this.data.deleteSlot({
                  flag: "delete",
                  data: this.currentSlotInfo
                })
                this.toasterNotification(res["message"]);

              } else if (res["exception"]) {
                this.toasterNotification(res["exception"]);
              }
            })
          } else if (this.isRecruiter) {
            let obj = {
              recruiterCalendarId: slot.calendarId,
              emailId: this.data.email
            }
            this.data.deleteRecruiterslot(obj).subscribe(res => {
              console.log("delete res", res);
              if (res["message"]) {
                this.data.getAllRecruitersSlots();
                let index = this.currentSlotInfo.indexOf(slot);
                this.currentSlotInfo.splice(index, 1);
                if (this.currentSlotInfo.length === 0) {
                  this.noDataAvailableMsg = "No slots available";
                }
                this.data.deleteSlot({
                  flag: "delete",
                  data: this.currentSlotInfo
                })
                this.toasterNotification(res["message"]);

              } else if (res["exception"]) {
                this.toasterNotification(res["exception"]);
              }
            })
          }
        }
      },
      {
        text: 'Cancel',
        icon: 'close',
        role: 'cancel',
        handler: () => {
          console.log('Cancel clicked');
        }
      }]
    });
    await actionSheet.present();
  }

  async toasterNotification(message) {
    const toast = await this.toastController.create({
      message: message,
      showCloseButton: true,
      duration: 2000,
      position: 'bottom',
      closeButtonText: 'Close'
    });
    toast.present();
  }

  multipleDeleteChanged(event) {
    if (this.multipleDelete) {
      this.hideDelete = false;
      this.deleteAll = true;
    } else {
      this.hideDelete = true;
      this.deleteAll = false;
      this.currentSlotInfo.forEach(slot => {
        slot.isDeleteSelect = false;
      });
    }
    this.selectAllCheckbox = false;

  }

  selectSlot(slot) {
    if (this.deleteAll) {
      slot.isDeleteSelect = !slot.isDeleteSelect;
    }
  }

  deleteSelectedSlots() {
    let deleteCalendarIdArray = [];
    this.currentSlotInfo.forEach(slot => {
      if (slot.isDeleteSelect) {
        deleteCalendarIdArray.push(slot.calendarId);
      }
    });
    this.deleteSelectedArray = deleteCalendarIdArray.slice();

    this.presentActionSheetForMultipleDelete(deleteCalendarIdArray);

  }



  async presentActionSheetForMultipleDelete(slotArray) {
    const actionSheet = await this.actionSheetController.create({
      header: 'Do you want to delete selected slots ?',
      buttons: [{
        text: 'Delete',
        role: 'destructive',
        icon: 'trash',
        handler: () => {
          if (this.isInterviewer) {
            this.recursiveDeleteFnInterviewer(slotArray);
          } else if (this.isRecruiter) {
            this.recursiveDeleteFnRecruiter(slotArray);
          }
        }
      },
      {
        text: 'Cancel',
        icon: 'close',
        role: 'cancel',
        handler: () => {
          console.log('Cancel clicked');
        }
      }]
    });
    await actionSheet.present();
  }

  recursiveDeleteFnInterviewer(slotArray) {
    if (slotArray.length > 0) {
      let index = slotArray.length - 1;
      this.data.deleteInterviewSlot(slotArray[index]).subscribe(res => {
        slotArray.pop();
        if (slotArray.length > 0) {
          this.recursiveDeleteFnInterviewer(slotArray);
        } else {
          if (res["message"]) {
            this.data.getAllInterviewerSlots();
            this.currentSlotInfo = this.currentSlotInfo.filter(data => {
              return this.deleteSelectedArray.indexOf(data.calendarId) === -1
            });
            if (this.currentSlotInfo.length === 0) {
              this.noDataAvailableMsg = "No slots available";
            }
            this.data.deleteSlot({
              flag: "delete",
              data: this.currentSlotInfo
            })
            this.toasterNotification(res["message"]);
            this.clearDeleteSelection();

          } else if (res["exception"]) {
            this.toasterNotification(res["exception"]);
          }
        }
      });
    }
  }

  recursiveDeleteFnRecruiter(slotArray) {
    if (slotArray.length > 0) {
      let index = slotArray.length - 1;
      let obj = {
        recruiterCalendarId: slotArray[index],
        emailId: this.data.email
      }
      this.data.deleteRecruiterslot(obj).subscribe(res => {
        slotArray.pop();
        if (slotArray.length > 0) {
          this.recursiveDeleteFnRecruiter(slotArray);
        } else {
          if (res["message"]) {
            this.data.getAllRecruitersSlots();

            this.currentSlotInfo = this.currentSlotInfo.filter(data => {
              return this.deleteSelectedArray.indexOf(data.calendarId) === -1
            });

            if (this.currentSlotInfo.length === 0) {
              this.noDataAvailableMsg = "No slots available";
            }
            this.data.deleteSlot({
              flag: "delete",
              data: this.currentSlotInfo
            })
            this.toasterNotification(res["message"]);
            this.clearDeleteSelection();

          } else if (res["exception"]) {
            this.toasterNotification(res["exception"]);
          }

        }
      });
    }
  }


  checkboxChanged() {
    if (this.selectAllCheckbox) {
      this.currentSlotInfo.forEach(slot => {
        slot.isDeleteSelect = true;
      });
    } else {
      this.currentSlotInfo.forEach(slot => {
        slot.isDeleteSelect = false;
      });
    }
  }

  clearDeleteSelection() {
    this.multipleDelete = false;
    this.currentSlotInfo.forEach(slot => {
      slot.isDeleteSelect = false;
    });
    this.deleteSelectedArray = [];
    this.selectAllCheckbox = false;
    this.deleteAll = false;
    this.hideDelete = true;
  }

}
